from aiogram import Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
import json
import logging

WEBAPP_URL = "https://flip-production-fbfb.up.railway.app"  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ HTTPS!

# –ö–æ–º–∞–Ω–¥–∞ /start –∑–∞–ø—É—Å–∫–∞–µ—Ç WebApp
async def start(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üöÄ –û—Ç–∫—Ä—ã—Ç—å Flipzy", web_app={"url": WEBAPP_URL})]
        ]
    )
    await message.answer(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Flipzy!\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ MiniApp
async def webapp_data(message: Message):
    try:
        data = json.loads(message.web_app_data.data)
        logging.info(f"üì• WebApp data: {data}")

        # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å –∫–æ—à–µ–ª—å–∫–∞
        if data.get("type") == "wallet_connected":
            address = data.get("address")
            await message.answer(f"üîó –ö–æ—à–µ–ª—ë–∫ –ø–æ–¥–∫–ª—é—á—ë–Ω: <code>{address}</code>")
        else:
            await message.answer(f"üì¶ –ü–æ–ª—É—á–µ–Ω–æ –∏–∑ WebApp: <pre>{json.dumps(data, indent=2)}</pre>")

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö WebApp")
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ MiniApp.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers(dp: Dispatcher):
    dp.message.register(start, Command("start"))
    dp.message.register(webapp_data, lambda m: m.web_app_data is not None)
